#!/bin/bash

export DOCKER_CERT_PATH=/mnt/certs
export DOCKER_HOST=tcp://$HOST_IP:2376
portster &

checkPorts() {
	wget -qO- localhost:1411/ping
}

checkPorts
until [ $? -eq 0 ]; do
	checkPorts
done 
HTTP_PORT="`wget -qO- localhost:1411/port/80`"
REDIS_PORT="`wget -qO- localhost:1411/port/6379`"

sed 's/HOSTIP/'"$HOST_IP"'/g' -i /var/www/html/harness.json
sed 's/HTTP_PORT/'"$HTTP_PORT"'/g' -i /var/www/html/harness.json
sed 's/REDIS_PORT/'"$REDIS_PORT"'/g' -i /var/www/html/harness.json

#if [ -e "/extra/config/app.config" ]; then
#	appconfig=`cat /extra/config/app.config`
#	jq ".applications |= .+ [ $appconfig ]" /var/www/html/harness.json > /tmp/nginx/harness.json
#	cp /tmp/nginx/harness.json /var/www/html/harness.json
#	chmod a+wr /tmp/nginx/harness.json
#fi

service nginx start

# If user has mounted (vid Docker's -v argument) a directory /import then we'll 
# slurp data from that directory into MongoDB using the file names as collection names.
#if [ -d "/extra/mongo" ]; then
#	for dbdir in $(ls -d /extra/mongo/*); do
#		db=$(basename $dbdir)
#		for f in $(ls $dbdir/*.js); do
#			filename=$(basename $f)
#			coll=${filename%.*}
#			mongoimport --db $db --collection $coll --file $f
#		done
#	done
#fi

# If /extra is mounted then look for app.config file and glom its contents
# into the 'applications' section of harness.json

#if [ -d "/extra/http" ]; then
#	cp /extra/http/* /var/www/html/
#fi

# status checker
check.sh &

set -e

# allow the container to be started with `--user`
if [ "$1" = 'redis-server' -a "$(id -u)" = '0' ]; then
	chown -R redis .
	exec gosu redis "$0" "$@"
fi

#exec "$@"
exec "redis-server" &